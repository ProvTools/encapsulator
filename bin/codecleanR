#!/usr/bin/env ruby

require "codecleanR"
require 'open5'

def usage
  puts "USAGE\n\n"
  puts '--info <path to provjson> display information about the provenance graph'
  puts '--jpg <path to provjson> output graph as jpg'
  puts '--png <path to provjson> output graph as png'
  puts '--svg <path to provjson> output graph as svg'
  puts '--code <path to provjson> <output id> output code needed to generate the node'
  puts '--run <path to R script> run the provided r script'
end

def vagrant vm_name, install_instructions
  provision = Array.new
  provision << '# -*- mode: ruby -*-'
  provision << '# vi: set ft=ruby :'
  provision << 'Vagrant.configure(2) do |config|'
  provision << "  "+'config.vm.box = "jhcook/fedora25"'
  provision << "  "+'config.vm.provider "virtualbox" do |vb|'
  provision << "  "+'vb.gui = true'
  provision << "  "+'vb.memory = 2048'
  provision << "  "+'vb.customize ["modifyvm", :id, "--cpuexecutioncap", "70"]'
  provision << "  "+'vb.cpus = 2'
  provision << "  "+"vb.name = \"#{vm_name}\""
  provision << 'end'
  provision << 'config.vm.provision "shell", inline: <<-SHELL'
  provision << "  "+'sudo dnf -y -v install openssl-devel libxml2-devel'
  provision << "  "+'sudo dnf -y -v install libcurl libcurl-devel'
  provision << "  "+'sudo dnf -y -v install perl-CPAN'
  provision << "  "+'sudo dnf -y -v install ruby'
  provision << "  "+'wget https://atom.io/download/rpm'
  provision << "  "+'mv ./rpm ./atom.rpm'
  provision << "  "+'sudo dnf -y install ./atom.rpm'
  provision << "  "+'rm -rf ./atom.rpm'
  provision << install_instructions
  provision << 'SHELL'
  provision << 'end'
end

def decapsulate vm
	puts 'looking for the capsule #{vm}...'
  open5('vagrant', 'init', vm) do |i, o, e, t|
    puts o.gets
  end
	puts 'getting your capsule ready, be patient...'
  open5('vagrant', 'up') do |i, o, e, t|
    puts o.gets
  end
end

if ARGV[0] == '--info'
  CodecleanR::EdgeCounter.new.read_json_file(ARGV[1]).show
  v = CodecleanR::VertexCounter.new.read_json_file(ARGV[1])
  puts vagrant 'test', v.install
  CodecleanR::ProvJSONtoRGL.new.read_json_file(ARGV[1]).information
elsif ARGV[0] == '--provision'
  v = CodecleanR::VertexCounter.new.read_json_file(ARGV[1])
  puts vagrant ARGV[2], v.install
elsif ARGV[0] == '--decapsulate'
  decapsulate ARGV[1]
elsif ARGV[0] == '--jpg'
  CodecleanR::ProvJSONtoRGL.new.read_json_file(ARGV[1]).png
elsif ARGV[0] == '--png'
  CodecleanR::ProvJSONtoRGL.new.read_json_file(ARGV[1]).png
elsif ARGV[0] == '--svg'
  CodecleanR::ProvJSONtoRGL.new.read_json_file(ARGV[1]).svg
elsif ARGV[0] == '--code'
  $json_name = ARGV[1]
  #v = CodecleanR::VertexCounter.new.read_json_file($json_name)
  script = CodecleanR::ProvJSONtoRGL.new.read_json_file(ARGV[1]).script ARGV[2]
  if script.nil?
    puts 'This is an input fule.'
  else
    puts script
  end
elsif ARGV[0] == '--run'
  require 'rinruby'
  r = RinRuby.new(echo: false)
  r.eval "library('RDataTracker')"
  r.eval "ddg.run('#{ARGV[1]}')"
else
  usage()
end
